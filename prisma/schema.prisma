generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  name     String
  role     Role
  password String
  projects Project[]
  files    File[]
}

model Project {
  id          String    @id @default(uuid())
  title       String
  description String
  studentId   String
  student     User      @relation(fields: [studentId], references: [id])
  advisorId   String
  advisor     User      @relation(name: "AdvisorProjects", fields: [advisorId], references: [id])
  status      Status
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  progress    Int
  tasks       Task[]
  meetings    Meeting[]
  files       File[]
}

model Task {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  title       String
  description String
  status      TaskStatus
  deadline    DateTime
  feedback    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Meeting {
  id           String        @id @default(uuid())
  projectId    String
  project      Project       @relation(fields: [projectId], references: [id])
  scheduledFor DateTime
  status       MeetingStatus
  notes        String?
}

model File {
  id         String   @id @default(uuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  name       String
  url        String
  uploadedBy String
  user       User     @relation(fields: [uploadedBy], references: [id])
  uploadedAt DateTime @default(now())
}

enum Role {
  STUDENT
  ADVISOR
}

enum Status {
  ACTIVE
  COMPLETED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum MeetingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

